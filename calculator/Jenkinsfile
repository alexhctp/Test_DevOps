pipeline {
    agent any
    
    environment {
        // Define build directory for clean workspace
        BUILD_DIR = "${WORKSPACE}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                // Source code is automatically checked out by Jenkins
                sh 'ls -la'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing required dependencies...'
                sh '''
                    # Install build essentials and required packages
                    sudo apt-get update
                    sudo apt-get install -y build-essential g++ clang-tidy clang-format
                    
                    # Install Google Test library
                    sudo apt-get install -y libgtest-dev cmake
                    
                    # Verify installations
                    g++ --version
                    clang-tidy --version
                    clang-format --version
                '''
            }
        }
        
        stage('Code Quality Check') {
            parallel {
                stage('Lint') {
                    steps {
                        echo 'Running code linting...'
                        sh 'make lint'
                    }
                }
                
                stage('Format Check') {
                    steps {
                        echo 'Checking code formatting...'
                        sh 'make format-check'
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the calculator application...'
                sh 'make clean'
                sh 'make'
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                sh 'make unittest'
            }
            post {
                always {
                    // Archive test results if they exist
                    script {
                        if (fileExists('tests/bin/*')) {
                            echo 'Test binaries found'
                        }
                    }
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                echo 'Archiving build artifacts...'
                archiveArtifacts artifacts: 'bin/calculator', allowEmptyArchive: true
                archiveArtifacts artifacts: 'tests/bin/**', allowEmptyArchive: true
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
            // Clean workspace
            sh 'make clean'
        }
        
        success {
            echo 'Pipeline executed successfully!'
        }
        
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        
        unstable {
            echo 'Pipeline completed but with some issues.'
        }
    }
}
